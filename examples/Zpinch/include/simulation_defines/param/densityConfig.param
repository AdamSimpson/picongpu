/* Copyright 2013-2017 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "particles/densityProfiles/profiles.def"
/* preprocessor struct generator */
#include "preprocessor/struct.hpp"


namespace picongpu
{
namespace SI
{
    /** Base density in particles per m^3 in the density profiles.
     *
     * This is often taken as reference maximum density in normalized profiles.
     * Individual particle species can define a `densityRatio` flag relative
     * to this value.
     *
     * unit: ELEMENTS/m^3
     */
    constexpr float_64 BASE_DENSITY_SI = 1.e21; // electron density for Ar 5+
}

namespace densityProfiles
{
    struct CylinderFunctor
    {
        /** This formula uses SI quantities only.
         *  The profile will be multiplied by BASE_DENSITY_SI.
         *
         * @param position_SI total offset including all slides [meter]
         * @param cellSize_SI cell sizes [meter]
         *
         * @return float_X density [normalized to 1.0]
         */
        HDINLINE float_X
        operator()(
            const floatD_64& position_SI,
            const float3_64& cellSize_SI
        )
        {
            const float_64 y( position_SI.y() * 1000.0 ); // m -> mm
            const float_64 z( position_SI.z() * 1000.0 ); // m -> mm

            /* cylinder, periodic along x */
            constexpr float_64 mid = 5.0; // mm
            const float_64 r = math::sqrt(
                ( y - mid ) * ( y - mid ) +
                ( z - mid ) * ( z - mid )
            );

            /* zero outside cylinder */
            float_64 s( 0.0 );

            /* full density inside cylinder */
            if( r <= mid )
                s = 1.0;

            /* all parts of the function MUST be > 0 */
            s *= float_64(s >= 0.0);
            return s;
        }
    };

    /* definition of the cylinder profile */
    using Cylinder = FreeFormulaImpl< CylinderFunctor >;
}
}
