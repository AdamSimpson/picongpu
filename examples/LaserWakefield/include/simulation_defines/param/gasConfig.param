/**
 * Copyright 2013-2014 Axel Huebl, Rene Widera, Felix Schmitt
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "traits/GetUnitValue.hpp"
#include "particles/gasProfiles/profiles.def"

namespace picongpu
{
namespace SI
{
/** The maximum density in particles per m^3 in the gas distribution
 *  unit: ELEMENTS/m^3
 *
 * He (2e- / Atom ) with 1.e15 He / m^3
 *                      = 2.e15 e- / m^3 */
const double GAS_DENSITY_SI = 1.e25;

}

//##########################################################################
//############## special gas profiles ######################################
//##########################################################################
namespace gasProfiles
{
struct FreeFormulaCylinder
{
    /* orientation of the cylinder: 0=x, 1=y, 2=z axis */
    static const uint32_t AXIS   = 1;

    struct SI
    {
        /** ...
         *  unit: meter */
        static const float_64 RADIUS = 1.0e-6;
        static const float_64 LENGTH = 1.0e-6;
        static const float_64 START  = 1.0e-6;
        static const float_64 MIDDLE = 3.0e-6;
    };

    HDINLINE float_X
    operator()( const floatD_X position, const float_64 unit_length ) const
    {
        const floatD_64 pos = precisionCast<float_64>(position) * unit_length;
        float_X dens = 1.0;
        float_64 r = 0.0;
        float_64 l = 0.0;

        switch(AXIS) {
            case 0:
                {
                    const float_64 dy = pos.y() - SI::MIDDLE;
                    const float_64 dz = pos.y() - SI::MIDDLE;
                    r = math::sqrt( dy*dy + dz*dz );
                }
                l = pos.x();
                break;
            case 1:
                {
                    const float_64 dx = pos.x() - SI::MIDDLE;
                    const float_64 dz = pos.y() - SI::MIDDLE;
                    r = math::sqrt( dx*dx + dz*dz );
                }
                l = pos.y();
                break;
            case 2:
                {
                    const float_64 dx = pos.x() - SI::MIDDLE;
                    const float_64 dy = pos.y() - SI::MIDDLE;
                    r = math::sqrt( dx*dx + dy*dy );
                }
                l = pos.z();
                break;
        }

        /* clip to volume inside the radius */
        dens *= float_X( r <= SI::RADIUS );

        /* clip to length */
        dens *= float_X( l >= SI::START );
        dens *= float_X( l <= SI::START + SI::LENGTH );

        return dens;
    }
};

struct FreeFormulaHollowCylinder
{
    /* orientation of the cylinder: 0=x, 1=y, 2=z axis */
    static const uint32_t AXIS   = 1;

    struct SI
    {
        /** ...
         *  unit: meter */
        static const float_64 RADIUS = 3.0e-6;
        static const float_64 RADIUS_INNER = 1.0e-6;
        static const float_64 LENGTH = 1.0e-6;
        static const float_64 START  = 1.0e-6;
        static const float_64 MIDDLE = 3.0e-6;
    };

    HDINLINE float_X
    operator()( const floatD_X position, const float_64 unit_length ) const
    {
        const floatD_64 pos = precisionCast<float_64>(position) * unit_length;
        float_X dens = 1.0;
        float_64 r = 0.0;
        float_64 l = 0.0;

        switch(AXIS) {
            case 0:
                {
                    const float_64 dy = pos.y() - SI::MIDDLE;
                    const float_64 dz = pos.y() - SI::MIDDLE;
                    r = math::sqrt( dy*dy + dz*dz );
                }
                l = pos.x();
                break;
            case 1:
                {
                    const float_64 dx = pos.x() - SI::MIDDLE;
                    const float_64 dz = pos.y() - SI::MIDDLE;
                    r = math::sqrt( dx*dx + dz*dz );
                }
                l = pos.y();
                break;
            case 2:
                {
                    const float_64 dx = pos.x() - SI::MIDDLE;
                    const float_64 dy = pos.y() - SI::MIDDLE;
                    r = math::sqrt( dx*dx + dy*dy );
                }
                l = pos.z();
                break;
        }

        /* clip to volume inside the radius */
        dens *= float_X( r <= SI::RADIUS );
        dens *= float_X( r >= SI::RADIUS_INNER );

        /* clip to length */
        dens *= float_X( l >= SI::START );
        dens *= float_X( l <= SI::START + SI::LENGTH );

        return dens;
    }
};

/* definition of profiles */
typedef FreeFormulaImpl<FreeFormulaCylinder> InnerCylinder;
typedef FreeFormulaImpl<FreeFormulaHollowCylinder> OuterHollowCylinder;

}//namespace gasProfiles

} //namepsace picongpu
