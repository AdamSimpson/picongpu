/* Copyright 2013-2017 Rene Widera, Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "simulation_defines.hpp"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "identifier/value_identifier.hpp"

#include "particles/Particles.hpp"
#include <boost/mpl/string.hpp>

namespace picongpu
{

/*########################### define particle attributes #####################*/

/** describe attributes of a particle*/
using DefaultParticleAttributes = MakeSeq_t<
    position<position_pic>,
    momentum,
    weighting
#if( ENABLE_RADIATION == 1 )
    , momentumPrev1
#endif
#if( RAD_MARK_PARTICLE > 1 ) || ( RAD_ACTIVATE_GAMMA_FILTER != 0 )
    , radiationFlag
#endif
>;

/*########################### end particle attributes ########################*/

/*########################### define species #################################*/

/* enable pusher by default if `PARAM_ENABLEPUSHER` is not defined in `cmakeFlags` */
#ifndef PARAM_ENABLEPUSHER
#   define PARAM_ENABLEPUSHER 1
#endif

/*--------------------------- positrons --------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier(float_X, MassRatioPositrons, 1.0);
value_identifier(float_X, ChargeRatioPositrons, -1.0);

/* ratio to BASE_DENSITY (e.g. n_e) */
value_identifier(float_X, DensityRatioPositrons, 2.0);

using ParticleFlagsPositrons = bmpl::vector<
/* enable the pusher only if PARAM_ENABLEPUSHER is defined as one `1` */
#if( PARAM_ENABLEPUSHER == 1 )
    particlePusher<UsedParticlePusher>,
#endif
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    massRatio<MassRatioPositrons>,
    chargeRatio<ChargeRatioPositrons>,
    densityRatio<DensityRatioPositrons>
>;

/* define species electrons */
using Positrons = Particles<
    bmpl::string< 'e', 'p' >,
    DefaultParticleAttributes,
    ParticleFlagsPositrons
>;

/*--------------------------- protons --------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier(float_X, MassRatioProtons, 1836.);
value_identifier(float_X, ChargeRatioProtons, -1.0);

/* ratio to BASE_DENSITY (e.g. n_e) */
value_identifier(float_X, DensityRatioProtons, 3.0);

using ParticleFlagsProtons = bmpl::vector<
/* enable the pusher only if PARAM_ENABLEPUSHER is defined as one `1` */
#if( PARAM_ENABLEPUSHER == 1 )
    particlePusher<UsedParticlePusher>,
#endif
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    massRatio<MassRatioProtons>,
    chargeRatio<ChargeRatioProtons>,
    densityRatio<DensityRatioPositrons>
>;

/* define species electrons */
using Protons = Particles<
    bmpl::string< 'p' >,
    DefaultParticleAttributes,
    ParticleFlagsProtons
>;

/*--------------------------- carbons --------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier(float_X, MassRatioCarbons, 21894.);
value_identifier(float_X, ChargeRatioCarbons, -1.0);

/* ratio to BASE_DENSITY (e.g. n_e) */
value_identifier(float_X, DensityRatioCarbons, 4.0);

using ParticleFlagsCarbons = bmpl::vector<
/* enable the pusher only if PARAM_ENABLEPUSHER is defined as one `1` */
#if( PARAM_ENABLEPUSHER == 1 )
    particlePusher<UsedParticlePusher>,
#endif
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    massRatio<MassRatioCarbons>,
    chargeRatio<ChargeRatioCarbons>,
    atomicNumbers<ionization::atomicNumbers::Carbon_t>,
    densityRatio<DensityRatioPositrons>
>;

/* define species electrons */
using Carbons = Particles<
    bmpl::string< 'C' >,
    MakeSeq_t<
        DefaultParticleAttributes,
        boundElectrons
    >,
    ParticleFlagsCarbons
>;

/*########################### end species ####################################*/

using VectorAllSpecies = MakeSeq_t<
    Positrons,
    Protons,
    Carbons
>;

} // namespace picongpu
